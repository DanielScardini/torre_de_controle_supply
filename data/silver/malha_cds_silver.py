# Databricks notebook source
# COMMAND ----------

# MAGIC %md
# MAGIC # An√°lise da Complexidade da Malha Log√≠stica de CDs
# MAGIC
# MAGIC Este notebook analisa a complexidade da malha log√≠stica de Centros de Distribui√ß√£o (CDs),
# MAGIC identificando ciclos, hierarquias e estruturas de fluxo entre dep√≥sitos.
# MAGIC
# MAGIC ## Objetivos:
# MAGIC - Construir grafo dirigido CD‚ÜíCD
# MAGIC - Detectar componentes fortemente conectadas (SCCs) ‚Üí ciclos
# MAGIC - Calcular n√≠veis hier√°rquicos de cada CD
# MAGIC - Visualizar estrutura com gr√°fico interativo Plotly

# COMMAND ----------

# MAGIC %md
# MAGIC ## Configura√ß√µes e Imports

# COMMAND ----------

# Instalar depend√™ncias necess√°rias
%pip install plotly networkx

# COMMAND ----------

# Imports necess√°rios
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots
import networkx as nx
import pandas as pd
import json
from collections import defaultdict, deque
from typing import Dict, List, Tuple, Set
import numpy as np

from pyspark.sql import SparkSession, DataFrame
from pyspark.sql import functions as F
from pyspark.sql.types import StructType, StructField, StringType, IntegerType

# COMMAND ----------

# MAGIC %md
# MAGIC ## Configura√ß√µes de Ambiente

# COMMAND ----------

# Widgets para configura√ß√£o
dbutils.widgets.dropdown("ambiente_tabela", "DEV", ["DEV", "PROD"], "Ambiente da Tabela")
dbutils.widgets.dropdown("modo_execucao", "TEST", ["TEST", "RUN"], "Modo de Execu√ß√£o")
dbutils.widgets.text("sample_size", "1000", "Tamanho do Sample (apenas para TEST)")

# Obter valores dos widgets
AMBIENTE_TABELA = dbutils.widgets.get("ambiente_tabela")
MODO_EXECUCAO = dbutils.widgets.get("modo_execucao")
SAMPLE_SIZE = int(dbutils.widgets.get("sample_size"))

print(f"üîß Configura√ß√µes:")
print(f"  ‚Ä¢ Ambiente: {AMBIENTE_TABELA}")
print(f"  ‚Ä¢ Modo: {MODO_EXECUCAO}")
print(f"  ‚Ä¢ Sample Size: {SAMPLE_SIZE}")

# Configura√ß√µes de desenvolvimento
USAR_SAMPLES = (MODO_EXECUCAO == "TEST")

# Nome da tabela (ajustar conforme necess√°rio)
TABELA_PLANO_ABASTECIMENTO = f"data_engineering_{AMBIENTE_TABELA.lower()}.context_logistica.planoabastecimento"

print(f"üìä Tabela de origem: {TABELA_PLANO_ABASTECIMENTO}")

# COMMAND ----------

# MAGIC %md
# MAGIC ## Explora√ß√£o da Tabela PlanoAbastecimento - Hierarquia e Malha

# COMMAND ----------

print("üì• Carregando dados da tabela PlanoAbastecimento...")

# Carregar dados da tabela
plano_df = spark.table(TABELA_PLANO_ABASTECIMENTO)

# Verificar colunas dispon√≠veis
print(f"üìã Colunas dispon√≠veis: {plano_df.columns}")

# Mostrar schema detalhado
print(f"\nüìä Schema da tabela:")
plano_df.printSchema()

# Mostrar algumas linhas para entender a estrutura
print(f"\nüîç Primeiras 5 linhas:")
plano_df.show(5, truncate=False)

# Contar registros totais
total_registros = plano_df.count()
print(f"\nüìä Total de registros: {total_registros:,}")

# COMMAND ----------

# MAGIC %md
# MAGIC ## Identifica√ß√£o das Colunas de Hierarquia e Malha

# COMMAND ----------

print("üîç Identificando colunas para hierarquia e malha CD‚ÜíLoja...")

# Procurar colunas relacionadas a filiais, CDs, lojas
colunas_filial = [col for col in plano_df.columns if any(palavra in col.upper() for palavra in ['FILIAL', 'CD', 'LOJA', 'DEPOSITO', 'CENTRO'])]
colunas_tipo = [col for col in plano_df.columns if any(palavra in col.upper() for palavra in ['TIPO', 'CATEGORIA', 'CLASSIFICACAO'])]
colunas_hierarquia = [col for col in plano_df.columns if any(palavra in col.upper() for palavra in ['HIERARQUIA', 'NIVEL', 'LEVEL', 'PARENT', 'PAI', 'FILHO'])]

print(f"üìã Colunas relacionadas a FILIAIS: {colunas_filial}")
print(f"üìã Colunas relacionadas a TIPO: {colunas_tipo}")
print(f"üìã Colunas relacionadas a HIERARQUIA: {colunas_hierarquia}")

# Mostrar todas as colunas para an√°lise manual
print(f"\nüìã Todas as colunas dispon√≠veis:")
for i, col in enumerate(plano_df.columns):
    print(f"  {i+1:2d}. {col}")

# COMMAND ----------

# MAGIC %md
# MAGIC ## An√°lise dos Tipos de Filiais (CDs vs Lojas)

# COMMAND ----------

print("üè¢ Analisando tipos de filiais para identificar CDs e Lojas...")

# Procurar coluna que identifica tipo de filial (CD vs Loja)
# Poss√≠veis nomes: TipoFilial, CategoriaFilial, ClassificacaoFilial, etc.
colunas_tipo_filial = [col for col in plano_df.columns if any(palavra in col.upper() for palavra in ['TIPO', 'CATEGORIA', 'CLASSIFICACAO']) and 'FILIAL' in col.upper()]

if colunas_tipo_filial:
    tipo_filial_col = colunas_tipo_filial[0]
    print(f"üìä Usando coluna de tipo: {tipo_filial_col}")
    
    # Mostrar valores √∫nicos de tipo
    print(f"\nüìä Valores √∫nicos de tipo de filial:")
    tipos_unicos = plano_df.select(tipo_filial_col).distinct().collect()
    for row in tipos_unicos:
        print(f"  ‚Ä¢ {row[0]}")
    
    # Contar por tipo
    print(f"\nüìà Contagem por tipo de filial:")
    contagem_tipos = plano_df.groupBy(tipo_filial_col).count().orderBy(F.desc("count")).collect()
    for row in contagem_tipos:
        print(f"  ‚Ä¢ {row[0]}: {row[1]:,} registros")
        
else:
    print("‚ö†Ô∏è N√£o encontrou coluna de tipo de filial")
    print("üí° Ser√° necess√°rio identificar manualmente CDs vs Lojas")

# COMMAND ----------

# MAGIC %md
# MAGIC ## Identifica√ß√£o das Colunas de Conex√£o CD‚ÜíLoja

# COMMAND ----------

print("üîó Identificando colunas de conex√£o CD‚ÜíLoja...")

# Procurar colunas que podem representar origem (CD) e destino (Loja)
colunas_possiveis_origem = [col for col in plano_df.columns if any(palavra in col.upper() for palavra in ['ATENDE', 'ORIGEM', 'DE', 'FROM', 'FILIAL_ATENDE', 'CD_ATENDE'])]
colunas_possiveis_destino = [col for col in plano_df.columns if any(palavra in col.upper() for palavra in ['ENTREGA', 'DESTINO', 'PARA', 'TO', 'FILIAL_ENTREGA', 'LOJA_ENTREGA'])]

print(f"üìã Colunas poss√≠veis para ORIGEM (CD): {colunas_possiveis_origem}")
print(f"üìã Colunas poss√≠veis para DESTINO (Loja): {colunas_possiveis_destino}")

# Se n√£o encontrar automaticamente, mostrar colunas relacionadas a filiais
if not colunas_possiveis_origem or not colunas_possiveis_destino:
    print(f"\n‚ö†Ô∏è N√£o foi poss√≠vel identificar automaticamente as colunas de conex√£o.")
    print(f"üìã Colunas relacionadas a filiais:")
    for col in colunas_filial:
        print(f"  ‚Ä¢ {col}")
    
    print(f"\nüí° Ser√° necess√°rio identificar manualmente:")
    print(f"  ‚Ä¢ Coluna de ORIGEM (CD que atende): ?")
    print(f"  ‚Ä¢ Coluna de DESTINO (Loja atendida): ?")

# COMMAND ----------

# MAGIC %md
# MAGIC ## Configura√ß√£o Manual das Colunas de Hierarquia

# COMMAND ----------

# Configurar manualmente as colunas baseado na explora√ß√£o acima
# AJUSTAR ESTAS VARI√ÅVEIS CONFORME A ESTRUTURA REAL DA TABELA

# Colunas da tabela planoabastecimento (estrutura real)
COLUNA_CD_ATENDE = "CdFilialAtende"  # CD que atende (origem) - SEMPRE CD
COLUNA_CD_ENTREGA = "CdFilialEntrega"  # CD que entrega (destino) - SEMPRE CD
COLUNA_LOJA = "CdLoja"  # Loja espec√≠fica atendida - SEMPRE LOJA

print(f"üîß Configura√ß√£o das colunas:")
print(f"  ‚Ä¢ Coluna CD ATENDE: {COLUNA_CD_ATENDE} (SEMPRE CD)")
print(f"  ‚Ä¢ Coluna CD ENTREGA: {COLUNA_CD_ENTREGA} (SEMPRE CD)")
print(f"  ‚Ä¢ Coluna LOJA: {COLUNA_LOJA} (SEMPRE LOJA)")

# Verificar se as colunas existem
colunas_obrigatorias = [COLUNA_CD_ATENDE, COLUNA_CD_ENTREGA, COLUNA_LOJA]

print(f"\n‚úÖ Verifica√ß√£o de colunas obrigat√≥rias:")
for col in colunas_obrigatorias:
    if col in plano_df.columns:
        print(f"  ‚úÖ {col}: Encontrada")
    else:
        print(f"  ‚ùå {col}: N√ÉO encontrada")

# COMMAND ----------

# MAGIC %md
# MAGIC ## Aplica√ß√£o de Sample para Desenvolvimento

# COMMAND ----------

# Aplicar sample se configurado para desenvolvimento
if USAR_SAMPLES:
    print(f"üî¨ Modo TEST: Aplicando sample de {SAMPLE_SIZE} registros...")
    plano_df = plano_df.sample(0.1).limit(SAMPLE_SIZE)
    print(f"‚úÖ Sample aplicado: {plano_df.count():,} registros")
else:
    print(f"üöÄ Modo RUN: Processando todos os registros ({plano_df.count():,})")

# COMMAND ----------

# MAGIC %md
# MAGIC ## An√°lise da Estrutura CD‚ÜíCD e CD‚ÜíLoja

# COMMAND ----------

print("üèóÔ∏è Analisando estrutura CD‚ÜíCD e CD‚ÜíLoja...")
print("üìã IMPORTANTE: CdFilialAtende e CdFilialEntrega s√£o SEMPRE CDs, CdLoja √© SEMPRE LOJA")

# Verificar se temos as colunas necess√°rias
if COLUNA_CD_ATENDE not in plano_df.columns or COLUNA_CD_ENTREGA not in plano_df.columns or COLUNA_LOJA not in plano_df.columns:
    print("‚ùå ERRO: Colunas necess√°rias n√£o encontradas!")
    print(f"üìã Colunas dispon√≠veis: {plano_df.columns}")
    raise ValueError("N√£o √© poss√≠vel construir a an√°lise sem as colunas necess√°rias!")

# An√°lise 1: Conex√µes CD‚ÜíCD (quando CdFilialAtende != CdFilialEntrega)
# Ambos s√£o CDs, ent√£o temos um link real entre CDs
conexoes_cd_cd_df = (
    plano_df
    .select(
        F.col(COLUNA_CD_ATENDE).alias("cd_atende"),
        F.col(COLUNA_CD_ENTREGA).alias("cd_entrega")
    )
    .filter(
        F.col("cd_atende").isNotNull() & 
        F.col("cd_entrega").isNotNull() &
        (F.col("cd_atende") != F.col("cd_entrega"))  # Remove auto-loops
    )
    .dropDuplicates()
)

print(f"üìä Conex√µes CD‚ÜíCD encontradas: {conexoes_cd_cd_df.count():,}")

# An√°lise 2: Conex√µes CD‚ÜíLoja (quando CdFilialAtende == CdFilialEntrega)
# CdFilialAtende √© CD, CdLoja √© Loja, ent√£o temos CD atendendo suas lojas
conexoes_cd_loja_df = (
    plano_df
    .select(
        F.col(COLUNA_CD_ATENDE).alias("cd_atende"),
        F.col(COLUNA_LOJA).alias("loja_atendida")
    )
    .filter(
        F.col("cd_atende").isNotNull() & 
        F.col("loja_atendida").isNotNull() &
        (F.col(COLUNA_CD_ATENDE) == F.col(COLUNA_CD_ENTREGA))  # Mesmo CD atendendo suas lojas
    )
    .dropDuplicates()
)

print(f"üìä Conex√µes CD‚ÜíLoja encontradas: {conexoes_cd_loja_df.count():,}")

# Mostrar algumas conex√µes de cada tipo
print(f"\nüîç Primeiras 5 conex√µes CD‚ÜíCD:")
conexoes_cd_cd_df.show(5, truncate=False)

print(f"\nüîç Primeiras 5 conex√µes CD‚ÜíLoja:")
conexoes_cd_loja_df.show(5, truncate=False)

# COMMAND ----------

# MAGIC %md
# MAGIC ## An√°lise Detalhada das Conex√µes

# COMMAND ----------

print("üìä Analisando conex√µes CD‚ÜíCD e CD‚ÜíLoja...")

# Coletar dados para an√°lise em Python
conexoes_cd_cd_pandas = conexoes_cd_cd_df.toPandas()
conexoes_cd_loja_pandas = conexoes_cd_loja_df.toPandas()

print(f"\nüìà ESTAT√çSTICAS GERAIS:")
print(f"  ‚Ä¢ Conex√µes CD‚ÜíCD: {len(conexoes_cd_cd_pandas):,}")
print(f"  ‚Ä¢ Conex√µes CD‚ÜíLoja: {len(conexoes_cd_loja_pandas):,}")

# An√°lise CD‚ÜíCD
if len(conexoes_cd_cd_pandas) > 0:
    print(f"\nüèóÔ∏è AN√ÅLISE CD‚ÜíCD (Links entre CDs):")
    print(f"  ‚Ä¢ CDs √∫nicos que atendem outros CDs: {conexoes_cd_cd_pandas['cd_atende'].nunique():,}")
    print(f"  ‚Ä¢ CDs √∫nicos que s√£o atendidos: {conexoes_cd_cd_pandas['cd_entrega'].nunique():,}")
    print(f"  üìã NOTA: Ambos CdFilialAtende e CdFilialEntrega s√£o SEMPRE CDs")
    
    # Mostrar top CDs por n√∫mero de outros CDs atendidos
    print(f"\nüèÜ TOP 10 CDs que atendem mais outros CDs:")
    top_cds_atendem = conexoes_cd_cd_pandas['cd_atende'].value_counts().head(10)
    for cd, count in top_cds_atendem.items():
        print(f"  ‚Ä¢ {cd}: atende {count} outros CDs")
    
    # Mostrar top CDs por n√∫mero de vezes que s√£o atendidos
    print(f"\nüèÜ TOP 10 CDs mais atendidos por outros CDs:")
    top_cds_atendidos = conexoes_cd_cd_pandas['cd_entrega'].value_counts().head(10)
    for cd, count in top_cds_atendidos.items():
        print(f"  ‚Ä¢ {cd}: atendido por {count} outros CDs")

# An√°lise CD‚ÜíLoja
if len(conexoes_cd_loja_pandas) > 0:
    print(f"\nüè™ AN√ÅLISE CD‚ÜíLoja (CDs atendendo suas lojas):")
    print(f"  ‚Ä¢ CDs √∫nicos que atendem lojas: {conexoes_cd_loja_pandas['cd_atende'].nunique():,}")
    print(f"  ‚Ä¢ Lojas √∫nicas atendidas: {conexoes_cd_loja_pandas['loja_atendida'].nunique():,}")
    print(f"  üìã NOTA: CdFilialAtende √© SEMPRE CD, CdLoja √© SEMPRE LOJA")
    
    # Mostrar top CDs por n√∫mero de lojas atendidas
    print(f"\nüèÜ TOP 10 CDs que atendem mais lojas:")
    top_cds_lojas = conexoes_cd_loja_pandas['cd_atende'].value_counts().head(10)
    for cd, count in top_cds_lojas.items():
        print(f"  ‚Ä¢ {cd}: atende {count} lojas")

# An√°lise combinada
print(f"\nüîÑ AN√ÅLISE COMBINADA:")
if len(conexoes_cd_cd_pandas) > 0 and len(conexoes_cd_loja_pandas) > 0:
    cds_que_atendem_outros = set(conexoes_cd_cd_pandas['cd_atende'].unique())
    cds_que_atendem_lojas = set(conexoes_cd_loja_pandas['cd_atende'].unique())
    cds_hibridos = cds_que_atendem_outros.intersection(cds_que_atendem_lojas)
    
    print(f"  ‚Ä¢ CDs que atendem outros CDs: {len(cds_que_atendem_outros):,}")
    print(f"  ‚Ä¢ CDs que atendem lojas: {len(cds_que_atendem_lojas):,}")
    print(f"  ‚Ä¢ CDs h√≠bridos (fazem ambos): {len(cds_hibridos):,}")
    print(f"  üìã NOTA: Todos os valores s√£o CDs (CdFilialAtende)")
    
    if cds_hibridos:
        print(f"  ‚Ä¢ CDs h√≠bridos: {list(cds_hibridos)[:10]}")  # Mostrar apenas os primeiros 10

# COMMAND ----------

# MAGIC %md
# MAGIC ## Valida√ß√£o dos Dados Antes da An√°lise de Grafos

# COMMAND ----------

# Verificar se temos dados suficientes para an√°lise de grafos CD‚ÜíCD
if len(conexoes_cd_cd_pandas) == 0:
    print("‚ö†Ô∏è AVISO: Nenhuma conex√£o CD‚ÜíCD encontrada!")
    print("üîç Isso significa que n√£o h√° links entre CDs - cada CD atende apenas suas pr√≥prias lojas")
    print("üìä A an√°lise de grafos ser√° focada apenas na estrutura CD‚ÜíLoja")
    print("üìã NOTA: CdFilialAtende e CdFilialEntrega s√£o SEMPRE CDs")
    usar_grafo_cd_cd = False
else:
    print(f"‚úÖ Dados CD‚ÜíCD validados! {len(conexoes_cd_cd_pandas):,} conex√µes CD‚ÜíCD encontradas")
    print("üöÄ Prosseguindo com an√°lise de grafos CD‚ÜíCD...")
    print("üìã NOTA: CdFilialAtende e CdFilialEntrega s√£o SEMPRE CDs")
    usar_grafo_cd_cd = True

# Verificar dados CD‚ÜíLoja
if len(conexoes_cd_loja_pandas) == 0:
    print("‚ö†Ô∏è AVISO: Nenhuma conex√£o CD‚ÜíLoja encontrada!")
    print("üîç Verifique se a estrutura da tabela est√° correta")
    print("üìã NOTA: CdFilialAtende √© SEMPRE CD, CdLoja √© SEMPRE LOJA")
    usar_grafo_cd_loja = False
else:
    print(f"‚úÖ Dados CD‚ÜíLoja validados! {len(conexoes_cd_loja_pandas):,} conex√µes CD‚ÜíLoja encontradas")
    print("üìã NOTA: CdFilialAtende √© SEMPRE CD, CdLoja √© SEMPRE LOJA")
    usar_grafo_cd_loja = True

if not usar_grafo_cd_cd and not usar_grafo_cd_loja:
    print("‚ùå ERRO: Nenhum tipo de conex√£o v√°lida encontrada!")
    raise ValueError("N√£o √© poss√≠vel prosseguir sem conex√µes v√°lidas!")

# COMMAND ----------

# MAGIC %md
# MAGIC ## An√°lise de Grafos com NetworkX

# COMMAND ----------

print("üï∏Ô∏è Criando grafos NetworkX...")

# Criar grafo dirigido para CD‚ÜíCD
if usar_grafo_cd_cd:
    print("üèóÔ∏è Criando grafo CD‚ÜíCD...")
    G_cd_cd = nx.DiGraph()
    
    # Adicionar arestas CD‚ÜíCD
    for _, row in conexoes_cd_cd_pandas.iterrows():
        G_cd_cd.add_edge(row['cd_atende'], row['cd_entrega'])
    
    # Estat√≠sticas do grafo CD‚ÜíCD
    num_nos_cd_cd = G_cd_cd.number_of_nodes()
    num_arestas_cd_cd = G_cd_cd.number_of_edges()
    
    print(f"üìä Estat√≠sticas do Grafo CD‚ÜíCD:")
    print(f"  ‚Ä¢ N√≥s (CDs): {num_nos_cd_cd:,}")
    print(f"  ‚Ä¢ Arestas (fluxos CD‚ÜíCD): {num_arestas_cd_cd:,}")
    print(f"  ‚Ä¢ Densidade: {nx.density(G_cd_cd):.4f}")
    
    # Verificar se o grafo CD‚ÜíCD √© v√°lido
    if num_nos_cd_cd == 0:
        print("‚ùå ERRO: Grafo CD‚ÜíCD vazio!")
        usar_grafo_cd_cd = False
    elif num_nos_cd_cd == 1:
        print("‚ö†Ô∏è AVISO: Grafo CD‚ÜíCD com apenas 1 n√≥ - an√°lise limitada")
    else:
        print("‚úÖ Grafo CD‚ÜíCD criado com sucesso!")

# Criar grafo dirigido para CD‚ÜíLoja
if usar_grafo_cd_loja:
    print("\nüè™ Criando grafo CD‚ÜíLoja...")
    G_cd_loja = nx.DiGraph()
    
    # Adicionar arestas CD‚ÜíLoja
    for _, row in conexoes_cd_loja_pandas.iterrows():
        G_cd_loja.add_edge(row['cd_atende'], row['loja_atendida'])
    
    # Estat√≠sticas do grafo CD‚ÜíLoja
    num_nos_cd_loja = G_cd_loja.number_of_nodes()
    num_arestas_cd_loja = G_cd_loja.number_of_edges()
    
    print(f"üìä Estat√≠sticas do Grafo CD‚ÜíLoja:")
    print(f"  ‚Ä¢ N√≥s (CDs + Lojas): {num_nos_cd_loja:,}")
    print(f"  ‚Ä¢ Arestas (CD‚ÜíLoja): {num_arestas_cd_loja:,}")
    print(f"  ‚Ä¢ Densidade: {nx.density(G_cd_loja):.4f}")
    
    # Identificar CDs e Lojas no grafo
    cds_no_grafo = set(conexoes_cd_loja_pandas['cd_atende'].unique())
    lojas_no_grafo = set(conexoes_cd_loja_pandas['loja_atendida'].unique())
    
    print(f"\nüìä Composi√ß√£o do Grafo CD‚ÜíLoja:")
    print(f"  ‚Ä¢ CDs √∫nicos: {len(cds_no_grafo):,}")
    print(f"  ‚Ä¢ Lojas √∫nicas: {len(lojas_no_grafo):,}")
    
    # Verificar se o grafo CD‚ÜíLoja √© v√°lido
    if num_nos_cd_loja == 0:
        print("‚ùå ERRO: Grafo CD‚ÜíLoja vazio!")
        usar_grafo_cd_loja = False
    elif num_nos_cd_loja == 1:
        print("‚ö†Ô∏è AVISO: Grafo CD‚ÜíLoja com apenas 1 n√≥ - an√°lise limitada")
    else:
        print("‚úÖ Grafo CD‚ÜíLoja criado com sucesso!")

# COMMAND ----------

# MAGIC %md
# MAGIC ## An√°lise de Hierarquia e Complexidade

# COMMAND ----------

print("üîç Analisando hierarquia e complexidade...")

# An√°lise do grafo CD‚ÜíCD (se existir)
if usar_grafo_cd_cd:
    print("\nüèóÔ∏è AN√ÅLISE CD‚ÜíCD:")
    
    # Calcular SCCs (Componentes Fortemente Conectadas)
    sccs_cd_cd = list(nx.strongly_connected_components(G_cd_cd))
    ciclos_cd_cd = [scc for scc in sccs_cd_cd if len(scc) > 1]
    
    print(f"üìä An√°lise de Complexidade CD‚ÜíCD:")
    print(f"  ‚Ä¢ Total de SCCs: {len(sccs_cd_cd)}")
    print(f"  ‚Ä¢ SCCs com ciclos (>1 n√≥): {len(ciclos_cd_cd)}")
    print(f"  ‚Ä¢ SCCs isolados: {len(sccs_cd_cd) - len(ciclos_cd_cd)}")
    
    # Criar mapeamento de CD para tamanho da SCC
    cd_scc_size = {}
    for i, scc in enumerate(sccs_cd_cd):
        size = len(scc)
        for cd in scc:
            cd_scc_size[cd] = size
    
    # Calcular n√≠veis hier√°rquicos para CD‚ÜíCD
    def calcular_niveis_hierarquicos_cd_cd(G):
        """Calcula o n√≠vel hier√°rquico de cada CD baseado na dist√¢ncia m√°xima a partir de fontes"""
        
        # Encontrar CDs fonte (sem predecessores)
        fontes = [n for n in G.nodes() if G.in_degree(n) == 0]
        
        # Se n√£o h√° fontes, usar CDs com menor grau de entrada
        if not fontes:
            min_in_degree = min(G.in_degree(n) for n in G.nodes())
            fontes = [n for n in G.nodes() if G.in_degree(n) == min_in_degree]
        
        niveis = {}
        
        # Para cada fonte, calcular dist√¢ncias usando BFS
        for fonte in fontes:
            distancias = nx.single_source_shortest_path_length(G, fonte)
            for cd, distancia in distancias.items():
                if cd not in niveis or distancia > niveis[cd]:
                    niveis[cd] = distancia
        
        return niveis, fontes
    
    niveis_hierarquicos_cd_cd, cds_fonte = calcular_niveis_hierarquicos_cd_cd(G_cd_cd)
    
    print(f"\nüìä An√°lise Hier√°rquica CD‚ÜíCD:")
    print(f"  ‚Ä¢ CDs fonte identificados: {len(cds_fonte)}")
    print(f"  ‚Ä¢ Profundidade m√°xima: {max(niveis_hierarquicos_cd_cd.values()) if niveis_hierarquicos_cd_cd else 0}")
    print(f"  ‚Ä¢ N√≠veis √∫nicos: {len(set(niveis_hierarquicos_cd_cd.values()))}")
    
    if cds_fonte:
        print(f"  ‚Ä¢ CDs fonte: {list(cds_fonte)[:10]}")  # Mostrar apenas os primeiros 10

# An√°lise do grafo CD‚ÜíLoja (se existir)
if usar_grafo_cd_loja:
    print("\nüè™ AN√ÅLISE CD‚ÜíLoja:")
    
    # Calcular SCCs (Componentes Fortemente Conectadas)
    sccs_cd_loja = list(nx.strongly_connected_components(G_cd_loja))
    ciclos_cd_loja = [scc for scc in sccs_cd_loja if len(scc) > 1]
    
    print(f"üìä An√°lise de Complexidade CD‚ÜíLoja:")
    print(f"  ‚Ä¢ Total de SCCs: {len(sccs_cd_loja)}")
    print(f"  ‚Ä¢ SCCs com ciclos (>1 n√≥): {len(ciclos_cd_loja)}")
    print(f"  ‚Ä¢ SCCs isolados: {len(sccs_cd_loja) - len(ciclos_cd_loja)}")
    
    # Criar mapeamento de filial para tamanho da SCC
    filial_scc_size = {}
    for i, scc in enumerate(sccs_cd_loja):
        size = len(scc)
        for filial in scc:
            filial_scc_size[filial] = size
    
    # Calcular n√≠veis hier√°rquicos para CD‚ÜíLoja
    def calcular_niveis_hierarquicos_cd_loja(G, cds_no_grafo):
        """Calcula o n√≠vel hier√°rquico baseado na dist√¢ncia dos CDs (fontes)"""
        
        niveis = {}
        
        # CDs s√£o n√≠vel 0 (fontes)
        for cd in cds_no_grafo:
            niveis[cd] = 0
        
        # Calcular n√≠veis das lojas baseado na dist√¢ncia dos CDs
        for cd_fonte in cds_no_grafo:
            try:
                distancias = nx.single_source_shortest_path_length(G, cd_fonte)
                for filial, distancia in distancias.items():
                    if filial not in niveis or distancia > niveis[filial]:
                        niveis[filial] = distancia
            except:
                # Se n√£o conseguir calcular dist√¢ncia, manter n√≠vel atual
                continue
        
        return niveis
    
    niveis_hierarquicos_cd_loja = calcular_niveis_hierarquicos_cd_loja(G_cd_loja, cds_no_grafo)
    
    print(f"\nüìä An√°lise Hier√°rquica CD‚ÜíLoja:")
    print(f"  ‚Ä¢ CDs fonte (n√≠vel 0): {len(cds_no_grafo):,}")
    print(f"  ‚Ä¢ Profundidade m√°xima: {max(niveis_hierarquicos_cd_loja.values()) if niveis_hierarquicos_cd_loja else 0}")
    print(f"  ‚Ä¢ N√≠veis √∫nicos: {len(set(niveis_hierarquicos_cd_loja.values()))}")
    
    # Mostrar distribui√ß√£o por n√≠vel
    if niveis_hierarquicos_cd_loja:
        distribuicao_niveis = {}
        for filial, nivel in niveis_hierarquicos_cd_loja.items():
            if nivel not in distribuicao_niveis:
                distribuicao_niveis[nivel] = 0
            distribuicao_niveis[nivel] += 1
        
        print(f"\nüìà Distribui√ß√£o por N√≠vel Hier√°rquico:")
        for nivel in sorted(distribuicao_niveis.keys()):
            count = distribuicao_niveis[nivel]
            tipo = "CDs Fonte" if nivel == 0 else f"N√≠vel {nivel}"
            print(f"  ‚Ä¢ {tipo}: {count:,} filiais")

# COMMAND ----------

# MAGIC %md
# MAGIC ## Prepara√ß√£o dos Dados para Visualiza√ß√£o

# COMMAND ----------

print("üìä Preparando dados para visualiza√ß√£o...")

# Determinar qual grafo usar para visualiza√ß√£o
if usar_grafo_cd_cd and usar_grafo_cd_loja:
    print("üéØ Ambos os grafos dispon√≠veis - escolhendo CD‚ÜíCD para visualiza√ß√£o principal")
    G_principal = G_cd_cd
    conexoes_principal = conexoes_cd_cd_pandas
    niveis_principal = niveis_hierarquicos_cd_cd
    scc_size_principal = cd_scc_size
    tipo_grafo = "CD‚ÜíCD"
elif usar_grafo_cd_cd:
    print("üéØ Usando grafo CD‚ÜíCD para visualiza√ß√£o")
    G_principal = G_cd_cd
    conexoes_principal = conexoes_cd_cd_pandas
    niveis_principal = niveis_hierarquicos_cd_cd
    scc_size_principal = cd_scc_size
    tipo_grafo = "CD‚ÜíCD"
elif usar_grafo_cd_loja:
    print("üéØ Usando grafo CD‚ÜíLoja para visualiza√ß√£o")
    G_principal = G_cd_loja
    conexoes_principal = conexoes_cd_loja_pandas
    niveis_principal = niveis_hierarquicos_cd_loja
    scc_size_principal = filial_scc_size
    tipo_grafo = "CD‚ÜíLoja"
else:
    print("‚ùå ERRO: Nenhum grafo v√°lido para visualiza√ß√£o!")
    raise ValueError("N√£o √© poss√≠vel criar visualiza√ß√£o sem grafos v√°lidos!")

print(f"‚úÖ Grafo selecionado: {tipo_grafo}")
print(f"üìä N√≥s: {G_principal.number_of_nodes():,}")
print(f"üìä Arestas: {G_principal.number_of_edges():,}")

# COMMAND ----------

# MAGIC %md
# MAGIC ## Prepara√ß√£o dos Dados para Visualiza√ß√£o

# COMMAND ----------

print("üìä Preparando dados para visualiza√ß√£o...")

# Preparar m√©tricas para cada n√≥ do grafo principal
nos_metricas = []

for no in G_principal.nodes():
    grau_total = G_principal.degree(no)
    grau_entrada = G_principal.in_degree(no)
    grau_saida = G_principal.out_degree(no)
    nivel_hierarquico = niveis_principal.get(no, 0)
    scc_size = scc_size_principal.get(no, 1)
    em_ciclo = scc_size > 1
    
    nos_metricas.append({
        'no': no,
        'grau_total': grau_total,
        'grau_entrada': grau_entrada,
        'grau_saida': grau_saida,
        'nivel_hierarquico': nivel_hierarquico,
        'scc_size': scc_size,
        'em_ciclo': em_ciclo
    })

# Converter para DataFrame
nos_df = pd.DataFrame(nos_metricas)

print(f"üìä M√©tricas preparadas para {len(nos_df):,} n√≥s ({tipo_grafo})")
print(f"üîç Primeiras 5 m√©tricas:")
print(nos_df.head())

# COMMAND ----------

# MAGIC %md
# MAGIC ## Amostragem para Visualiza√ß√£o (se necess√°rio)

# COMMAND ----------

print("üéØ Preparando amostra para visualiza√ß√£o...")

# Se h√° muitos n√≥s, amostrar os de maior grau
MAX_NOS_VISUALIZACAO = 50

if len(nos_df) > MAX_NOS_VISUALIZACAO:
    print(f"‚ö†Ô∏è Muitos n√≥s ({len(nos_df)}). Amostrando os {MAX_NOS_VISUALIZACAO} de maior grau...")
    
    # Ordenar por grau total e pegar os top
    nos_amostra = nos_df.nlargest(MAX_NOS_VISUALIZACAO, 'grau_total')
    
    # Criar subgrafo apenas com os n√≥s amostrados
    nos_amostra_list = nos_amostra['no'].tolist()
    G_amostra = G_principal.subgraph(nos_amostra_list)
    
    # Filtrar arestas apenas entre n√≥s amostrados
    if tipo_grafo == "CD‚ÜíCD":
        arestas_amostra = conexoes_principal[
            (conexoes_principal['cd_atende'].isin(nos_amostra_list)) & 
            (conexoes_principal['cd_entrega'].isin(nos_amostra_list))
        ]
    else:  # CD‚ÜíLoja
        arestas_amostra = conexoes_principal[
            (conexoes_principal['cd_atende'].isin(nos_amostra_list)) & 
            (conexoes_principal['loja_atendida'].isin(nos_amostra_list))
        ]
    
    print(f"üìä Amostra selecionada: {len(nos_amostra)} n√≥s ({tipo_grafo})")
    print(f"üîó Arestas na amostra: {len(arestas_amostra)}")
    
else:
    print(f"‚úÖ Quantidade de n√≥s ({len(nos_df)}) adequada para visualiza√ß√£o completa")
    nos_amostra = nos_df
    G_amostra = G_principal
    arestas_amostra = conexoes_principal

# COMMAND ----------

# MAGIC %md
# MAGIC ## Cria√ß√£o do Gr√°fico Interativo Plotly

# COMMAND ----------

print("üìä Criando gr√°fico interativo...")

# Preparar posi√ß√µes dos n√≥s
# Usar layout hier√°rquico com n√≠vel no eixo Y
pos = {}
for _, row in nos_amostra.iterrows():
    no = row['no']
    nivel = row['nivel_hierarquico']
    
    # Posi√ß√£o X aleat√≥ria dentro do n√≠vel
    x_pos = np.random.uniform(-1, 1)
    pos[no] = (x_pos, -nivel)  # Negativo para n√≠vel 0 no topo

# Criar figura
fig = go.Figure()

# Adicionar arestas (linhas direcionais)
for _, edge in arestas_amostra.iterrows():
    if tipo_grafo == "CD‚ÜíCD":
        origem = edge['cd_atende']
        destino = edge['cd_entrega']
    else:  # CD‚ÜíLoja
        origem = edge['cd_atende']
        destino = edge['loja_atendida']
    
    if origem in pos and destino in pos:
        x0, y0 = pos[origem]
        x1, y1 = pos[destino]
        
        # Adicionar seta direcional
        fig.add_trace(go.Scatter(
            x=[x0, x1, None],
            y=[y0, y1, None],
            mode='lines',
            line=dict(color='lightgray', width=1),
            hoverinfo='none',
            showlegend=False
        ))

# Adicionar n√≥s
for _, row in nos_amostra.iterrows():
    no = row['no']
    x, y = pos[no]
    
    # Cor baseada no tamanho da SCC (ciclos)
    scc_size = row['scc_size']
    if scc_size > 1:
        cor = 'red'  # Vermelho para ciclos
    else:
        cor = 'blue'  # Azul para n√≥s isolados
    
    # Tamanho baseado no grau total
    tamanho = max(10, min(30, row['grau_total'] * 2))
    
    # Tooltip com m√©tricas
    hovertext = (
        f"{tipo_grafo}: {no}<br>"
        f"N√≠vel: {row['nivel_hierarquico']}<br>"
        f"Grau Total: {row['grau_total']}<br>"
        f"Grau Entrada: {row['grau_entrada']}<br>"
        f"Grau Sa√≠da: {row['grau_saida']}<br>"
        f"SCC Size: {scc_size}<br>"
        f"Em Ciclo: {'Sim' if row['em_ciclo'] else 'N√£o'}"
    )
    
    fig.add_trace(go.Scatter(
        x=[x],
        y=[y],
        mode='markers',
        marker=dict(
            size=tamanho,
            color=cor,
            line=dict(width=2, color='black')
        ),
        text=hovertext,
        hoverinfo='text',
        name=f"{tipo_grafo} {no}",
        showlegend=False
    ))

# Configurar layout
fig.update_layout(
    title=dict(
        text=f"Complexidade da Malha Log√≠stica - {tipo_grafo}<br><sub>Eixo Y = N√≠vel Hier√°rquico | Cor = SCC (Vermelho=Ciclo) | Tamanho = Grau Total</sub>",
        x=0.5,
        font=dict(size=16)
    ),
    xaxis=dict(
        title="Posi√ß√£o Horizontal",
        showgrid=True,
        zeroline=False
    ),
    yaxis=dict(
        title="N√≠vel Hier√°rquico (0 = Fonte)",
        showgrid=True,
        zeroline=False
    ),
    width=1200,
    height=800,
    showlegend=False,
    hovermode='closest'
)

# Adicionar anota√ß√µes para legenda
fig.add_annotation(
    x=0.02, y=0.98,
    xref='paper', yref='paper',
    text="üî¥ Vermelho = Ciclos<br>üîµ Azul = N√≥s Isolados<br>üìè Tamanho = Grau Total",
    showarrow=False,
    bgcolor='rgba(255,255,255,0.8)',
    bordercolor='black',
    borderwidth=1
)

print("‚úÖ Gr√°fico criado com sucesso!")

# COMMAND ----------

# MAGIC %md
# MAGIC ## Salvamento do Gr√°fico HTML

# COMMAND ----------

print("üíæ Salvando gr√°fico como HTML...")

# Salvar como HTML
html_path = f"/dbfs/tmp/malha_{tipo_grafo.lower().replace('‚Üí', '_')}.html"
fig.write_html(html_path)

print(f"‚úÖ Gr√°fico salvo em: {html_path}")

# COMMAND ----------

# MAGIC %md
# MAGIC ## Resumo das M√©tricas

# COMMAND ----------

print(f"üìä RESUMO DA AN√ÅLISE DA MALHA - {tipo_grafo}")
print("=" * 60)

# Estat√≠sticas gerais
print(f"üìà ESTAT√çSTICAS GERAIS:")
print(f"  ‚Ä¢ Total de n√≥s: {G_principal.number_of_nodes():,}")
print(f"  ‚Ä¢ Total de arestas: {G_principal.number_of_edges():,}")
print(f"  ‚Ä¢ Densidade do grafo: {nx.density(G_principal):.4f}")
print(f"  ‚Ä¢ N√≥s visualizados: {len(nos_amostra):,}")
print(f"  ‚Ä¢ Arestas visualizadas: {len(arestas_amostra):,}")

# An√°lise espec√≠fica por tipo de grafo
if tipo_grafo == "CD‚ÜíCD":
    print(f"\nüèóÔ∏è AN√ÅLISE CD‚ÜíCD:")
    print(f"  ‚Ä¢ CDs que atendem outros CDs: {conexoes_cd_cd_pandas['cd_atende'].nunique() if len(conexoes_cd_cd_pandas) > 0 else 0:,}")
    print(f"  ‚Ä¢ CDs que s√£o atendidos: {conexoes_cd_cd_pandas['cd_entrega'].nunique() if len(conexoes_cd_cd_pandas) > 0 else 0:,}")
    print(f"  ‚Ä¢ Total de conex√µes CD‚ÜíCD: {len(conexoes_cd_cd_pandas):,}")
    
    if usar_grafo_cd_cd:
        print(f"\nüîÑ AN√ÅLISE DE CICLOS:")
        print(f"  ‚Ä¢ Componentes fortemente conectadas: {len(sccs_cd_cd) if 'sccs_cd_cd' in locals() else 0}")
        print(f"  ‚Ä¢ Ciclos detectados: {len(ciclos_cd_cd) if 'ciclos_cd_cd' in locals() else 0}")
        print(f"  ‚Ä¢ CDs em ciclos: {sum(len(scc) for scc in ciclos_cd_cd) if 'ciclos_cd_cd' in locals() else 0}")
        
        print(f"\nüìä AN√ÅLISE HIER√ÅRQUICA:")
        print(f"  ‚Ä¢ CDs fonte: {len(cds_fonte) if 'cds_fonte' in locals() else 0:,}")
        print(f"  ‚Ä¢ Profundidade m√°xima: {max(niveis_hierarquicos_cd_cd.values()) if niveis_hierarquicos_cd_cd else 0}")
        print(f"  ‚Ä¢ N√≠veis √∫nicos: {len(set(niveis_hierarquicos_cd_cd.values())) if niveis_hierarquicos_cd_cd else 0}")

else:  # CD‚ÜíLoja
    print(f"\nüè™ AN√ÅLISE CD‚ÜíLoja:")
    print(f"  ‚Ä¢ CDs que atendem lojas: {conexoes_cd_loja_pandas['cd_atende'].nunique() if len(conexoes_cd_loja_pandas) > 0 else 0:,}")
    print(f"  ‚Ä¢ Lojas atendidas: {conexoes_cd_loja_pandas['loja_atendida'].nunique() if len(conexoes_cd_loja_pandas) > 0 else 0:,}")
    print(f"  ‚Ä¢ Total de conex√µes CD‚ÜíLoja: {len(conexoes_cd_loja_pandas):,}")
    
    if usar_grafo_cd_loja:
        print(f"\nüîÑ AN√ÅLISE DE CICLOS:")
        print(f"  ‚Ä¢ Componentes fortemente conectadas: {len(sccs_cd_loja) if 'sccs_cd_loja' in locals() else 0}")
        print(f"  ‚Ä¢ Ciclos detectados: {len(ciclos_cd_loja) if 'ciclos_cd_loja' in locals() else 0}")
        print(f"  ‚Ä¢ Filiais em ciclos: {sum(len(scc) for scc in ciclos_cd_loja) if 'ciclos_cd_loja' in locals() else 0}")
        
        print(f"\nüìä AN√ÅLISE HIER√ÅRQUICA:")
        print(f"  ‚Ä¢ CDs fonte: {len(cds_no_grafo) if 'cds_no_grafo' in locals() else 0:,}")
        print(f"  ‚Ä¢ Profundidade m√°xima: {max(niveis_hierarquicos_cd_loja.values()) if niveis_hierarquicos_cd_loja else 0}")
        print(f"  ‚Ä¢ N√≠veis √∫nicos: {len(set(niveis_hierarquicos_cd_loja.values())) if niveis_hierarquicos_cd_loja else 0}")

# Top n√≥s por grau
print(f"\nüèÜ TOP 10 N√ìS POR GRAU TOTAL:")
top_nos = nos_amostra.nlargest(10, 'grau_total')
for _, row in top_nos.iterrows():
    ciclo_info = " (CICLO)" if row['em_ciclo'] else ""
    print(f"  ‚Ä¢ {row['no']}: Grau {row['grau_total']} (N√≠vel {row['nivel_hierarquico']}){ciclo_info}")

print("=" * 60)

# COMMAND ----------

# MAGIC %md
# MAGIC ## Exporta√ß√£o do Resumo JSON

# COMMAND ----------

print("üìÑ Exportando resumo como JSON...")

# Criar resumo estruturado
resumo = {
    "tipo_grafo": tipo_grafo,
    "estatisticas_gerais": {
        "total_nos": int(G_principal.number_of_nodes()),
        "total_arestas": int(G_principal.number_of_edges()),
        "densidade": float(nx.density(G_principal)),
        "nos_visualizados": int(len(nos_amostra)),
        "arestas_visualizadas": int(len(arestas_amostra))
    },
    "configuracao": {
        "ambiente": AMBIENTE_TABELA,
        "modo": MODO_EXECUCAO,
        "usar_samples": USAR_SAMPLES,
        "tabela_origem": TABELA_PLANO_ABASTECIMENTO
    }
}

# Adicionar m√©tricas espec√≠ficas do tipo de grafo
if tipo_grafo == "CD‚ÜíCD":
    resumo["estatisticas_cd_cd"] = {
        "cds_unicos_atendem": int(conexoes_cd_cd_pandas['cd_atende'].nunique()) if len(conexoes_cd_cd_pandas) > 0 else 0,
        "cds_unicos_atendidos": int(conexoes_cd_cd_pandas['cd_entrega'].nunique()) if len(conexoes_cd_cd_pandas) > 0 else 0,
        "total_conexoes_cd_cd": int(len(conexoes_cd_cd_pandas))
    }
    
    if usar_grafo_cd_cd:
        resumo["analise_hierarquica"] = {
            "cds_fonte": int(len(cds_fonte)) if 'cds_fonte' in locals() else 0,
            "profundidade_maxima": int(max(niveis_hierarquicos_cd_cd.values())) if niveis_hierarquicos_cd_cd else 0,
            "niveis_unicos": int(len(set(niveis_hierarquicos_cd_cd.values()))) if niveis_hierarquicos_cd_cd else 0
        }
        
        resumo["analise_complexidade"] = {
            "total_sccs": int(len(sccs_cd_cd)) if 'sccs_cd_cd' in locals() else 0,
            "sccs_com_ciclos": int(len(ciclos_cd_cd)) if 'ciclos_cd_cd' in locals() else 0,
            "sccs_isolados": int(len(sccs_cd_cd) - len(ciclos_cd_cd)) if 'sccs_cd_cd' in locals() and 'ciclos_cd_cd' in locals() else 0
        }

else:  # CD‚ÜíLoja
    resumo["estatisticas_cd_loja"] = {
        "cds_unicos_atendem": int(conexoes_cd_loja_pandas['cd_atende'].nunique()) if len(conexoes_cd_loja_pandas) > 0 else 0,
        "lojas_unicas_atendidas": int(conexoes_cd_loja_pandas['loja_atendida'].nunique()) if len(conexoes_cd_loja_pandas) > 0 else 0,
        "total_conexoes_cd_loja": int(len(conexoes_cd_loja_pandas))
    }
    
    if usar_grafo_cd_loja:
        resumo["analise_hierarquica"] = {
            "cds_fonte": int(len(cds_no_grafo)) if 'cds_no_grafo' in locals() else 0,
            "profundidade_maxima": int(max(niveis_hierarquicos_cd_loja.values())) if niveis_hierarquicos_cd_loja else 0,
            "niveis_unicos": int(len(set(niveis_hierarquicos_cd_loja.values()))) if niveis_hierarquicos_cd_loja else 0
        }
        
        resumo["analise_complexidade"] = {
            "total_sccs": int(len(sccs_cd_loja)) if 'sccs_cd_loja' in locals() else 0,
            "sccs_com_ciclos": int(len(ciclos_cd_loja)) if 'ciclos_cd_loja' in locals() else 0,
            "sccs_isolados": int(len(sccs_cd_loja) - len(ciclos_cd_loja)) if 'sccs_cd_loja' in locals() and 'ciclos_cd_loja' in locals() else 0
        }

# Adicionar top n√≥s
resumo["top_nos"] = nos_amostra.nlargest(10, 'grau_total').to_dict('records')

# Salvar JSON
json_path = f"/dbfs/tmp/malha_{tipo_grafo.lower().replace('‚Üí', '_')}_resumo.json"
with open(json_path, 'w') as f:
    json.dump(resumo, f, indent=2, ensure_ascii=False)

print(f"‚úÖ Resumo JSON salvo em: {json_path}")

# COMMAND ----------

# MAGIC %md
# MAGIC ## Exibi√ß√£o do Gr√°fico

# COMMAND ----------

# Exibir o gr√°fico
fig.show()

# COMMAND ----------

print(f"üéâ An√°lise da complexidade da malha - {tipo_grafo} conclu√≠da com sucesso!")
print("=" * 80)
print("üìÅ ARQUIVOS GERADOS:")
print(f"  ‚Ä¢ Gr√°fico HTML: {html_path}")
print(f"  ‚Ä¢ Resumo JSON: {json_path}")
print("=" * 80)
print("üîç INTERPRETA√á√ÉO DOS RESULTADOS:")
print("  ‚Ä¢ Eixo Y: N√≠vel hier√°rquico (0 = fonte, n√∫meros maiores = mais distante)")
print("  ‚Ä¢ Cor Vermelha: N√≥s que fazem parte de ciclos")
print("  ‚Ä¢ Cor Azul: N√≥s isolados (sem ciclos)")
print("  ‚Ä¢ Tamanho do n√≥: Proporcional ao grau total (conex√µes)")
print(f"  ‚Ä¢ Linhas: Fluxos direcionais {tipo_grafo}")
print("=" * 80)
print(f"üìä RESUMO EXECUTIVO:")
print(f"  ‚Ä¢ Tipo de an√°lise: {tipo_grafo}")
print(f"  ‚Ä¢ Ambiente: {AMBIENTE_TABELA}")
print(f"  ‚Ä¢ Modo: {MODO_EXECUCAO}")
print(f"  ‚Ä¢ N√≥s analisados: {len(nos_amostra):,}")
print(f"  ‚Ä¢ Arestas analisadas: {len(arestas_amostra):,}")
print("=" * 80)
