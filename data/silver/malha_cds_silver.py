# Databricks notebook source
# COMMAND ----------

# MAGIC %md
# MAGIC # An√°lise da Complexidade da Malha Log√≠stica de CDs
# MAGIC
# MAGIC Este notebook analisa a complexidade da malha log√≠stica de Centros de Distribui√ß√£o (CDs),
# MAGIC identificando ciclos, hierarquias e estruturas de fluxo entre dep√≥sitos.
# MAGIC
# MAGIC ## Objetivos:
# MAGIC - Construir grafo dirigido CD‚ÜíCD
# MAGIC - Detectar componentes fortemente conectadas (SCCs) ‚Üí ciclos
# MAGIC - Calcular n√≠veis hier√°rquicos de cada CD
# MAGIC - Visualizar estrutura com gr√°fico interativo Plotly

# COMMAND ----------

# MAGIC %md
# MAGIC ## Configura√ß√µes e Imports

# COMMAND ----------

# Instalar depend√™ncias necess√°rias
%pip install plotly networkx

# COMMAND ----------

# Imports necess√°rios
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots
import networkx as nx
import pandas as pd
import json
from collections import defaultdict, deque
from typing import Dict, List, Tuple, Set
import numpy as np

from pyspark.sql import SparkSession, DataFrame
from pyspark.sql import functions as F
from pyspark.sql.types import StructType, StructField, StringType, IntegerType

# COMMAND ----------

# MAGIC %md
# MAGIC ## Configura√ß√µes de Ambiente

# COMMAND ----------

# Widgets para configura√ß√£o
dbutils.widgets.dropdown("ambiente_tabela", "DEV", ["DEV", "PROD"], "Ambiente da Tabela")
dbutils.widgets.dropdown("modo_execucao", "TEST", ["TEST", "RUN"], "Modo de Execu√ß√£o")
dbutils.widgets.text("sample_size", "1000", "Tamanho do Sample (apenas para TEST)")

# Obter valores dos widgets
AMBIENTE_TABELA = dbutils.widgets.get("ambiente_tabela")
MODO_EXECUCAO = dbutils.widgets.get("modo_execucao")
SAMPLE_SIZE = int(dbutils.widgets.get("sample_size"))

print(f"üîß Configura√ß√µes:")
print(f"  ‚Ä¢ Ambiente: {AMBIENTE_TABELA}")
print(f"  ‚Ä¢ Modo: {MODO_EXECUCAO}")
print(f"  ‚Ä¢ Sample Size: {SAMPLE_SIZE}")

# Configura√ß√µes de desenvolvimento
USAR_SAMPLES = (MODO_EXECUCAO == "TEST")

# Nome da tabela (ajustar conforme necess√°rio)
TABELA_MALHA_CDS = f"data_engineering_{AMBIENTE_TABELA.lower()}.context_logistica.planoabastecimento"

print(f"üìä Tabela de origem: {TABELA_MALHA_CDS}")

# COMMAND ----------

# MAGIC %md
# MAGIC ## Carregamento e Limpeza dos Dados

# COMMAND ----------

print("üì• Carregando dados da malha de CDs...")

# Carregar dados da tabela
malha_df = spark.table(TABELA_MALHA_CDS)

# Verificar colunas dispon√≠veis
print(f"üìã Colunas dispon√≠veis: {malha_df.columns}")

# Aplicar sample se configurado para desenvolvimento
if USAR_SAMPLES:
    malha_df = malha_df.sample(0.1).limit(SAMPLE_SIZE)
    print(f"üî¨ Modo TEST: Aplicado sample de {SAMPLE_SIZE} registros")

# COMMAND ----------

# MAGIC %md
# MAGIC ## Constru√ß√£o do Grafo CD‚ÜíCD

# COMMAND ----------

print("üîó Construindo grafo dirigido CD‚ÜíCD...")

# Selecionar colunas de origem e destino (ajustar conforme schema real)
# Assumindo que as colunas s√£o CdFilialAtende e CdFilialEntrega
arestas_df = (
    malha_df
    .select(
        F.col("CdFilialAtende").alias("origem"),
        F.col("CdFilialEntrega").alias("destino")
    )
    .filter(
        F.col("origem").isNotNull() & 
        F.col("destino").isNotNull() &
        (F.col("origem") != F.col("destino"))  # Remove auto-loops
    )
    .dropDuplicates()
)

# Coletar dados para an√°lise em Python
arestas_pandas = arestas_df.toPandas()

print(f"üìä Arestas encontradas: {len(arestas_pandas):,}")
print(f"üîç Primeiras 5 arestas:")
print(arestas_pandas.head())

# COMMAND ----------

# MAGIC %md
# MAGIC ## An√°lise de Grafos com NetworkX

# COMMAND ----------

print("üï∏Ô∏è Criando grafo NetworkX...")

# Criar grafo dirigido
G = nx.DiGraph()

# Adicionar arestas
for _, row in arestas_pandas.iterrows():
    G.add_edge(row['origem'], row['destino'])

# Estat√≠sticas b√°sicas
num_nos = G.number_of_nodes()
num_arestas = G.number_of_edges()

print(f"üìä Estat√≠sticas do Grafo:")
print(f"  ‚Ä¢ N√≥s (CDs): {num_nos:,}")
print(f"  ‚Ä¢ Arestas (fluxos): {num_arestas:,}")
print(f"  ‚Ä¢ Densidade: {nx.density(G):.4f}")

# COMMAND ----------

# MAGIC %md
# MAGIC ## Detec√ß√£o de Componentes Fortemente Conectadas (SCCs)

# COMMAND ----------

print("üîÑ Detectando componentes fortemente conectadas (SCCs)...")

# Calcular SCCs
sccs = list(nx.strongly_connected_components(G))

# Filtrar SCCs com mais de 1 n√≥ (ciclos reais)
ciclos = [scc for scc in sccs if len(scc) > 1]

print(f"üìä An√°lise de SCCs:")
print(f"  ‚Ä¢ Total de SCCs: {len(sccs)}")
print(f"  ‚Ä¢ SCCs com ciclos (>1 n√≥): {len(ciclos)}")
print(f"  ‚Ä¢ SCCs isolados: {len(sccs) - len(ciclos)}")

# Criar mapeamento de CD para tamanho da SCC
cd_scc_size = {}
for i, scc in enumerate(sccs):
    size = len(scc)
    for cd in scc:
        cd_scc_size[cd] = size

# COMMAND ----------

# MAGIC %md
# MAGIC ## C√°lculo de N√≠veis Hier√°rquicos

# COMMAND ----------

print("üìä Calculando n√≠veis hier√°rquicos...")

def calcular_niveis_hierarquicos(G):
    """Calcula o n√≠vel hier√°rquico de cada n√≥ baseado na dist√¢ncia m√°xima a partir de fontes"""
    
    # Encontrar n√≥s fonte (sem predecessores)
    fontes = [n for n in G.nodes() if G.in_degree(n) == 0]
    
    # Se n√£o h√° fontes, usar n√≥s com menor grau de entrada
    if not fontes:
        min_in_degree = min(G.in_degree(n) for n in G.nodes())
        fontes = [n for n in G.nodes() if G.in_degree(n) == min_in_degree]
    
    niveis = {}
    
    # Para cada fonte, calcular dist√¢ncias usando BFS
    for fonte in fontes:
        distancias = nx.single_source_shortest_path_length(G, fonte)
        for no, distancia in distancias.items():
            if no not in niveis or distancia > niveis[no]:
                niveis[no] = distancia
    
    return niveis, fontes

# Calcular n√≠veis hier√°rquicos
niveis_hierarquicos, nos_fonte = calcular_niveis_hierarquicos(G)

print(f"üìä An√°lise Hier√°rquica:")
print(f"  ‚Ä¢ N√≥s fonte identificados: {len(nos_fonte)}")
print(f"  ‚Ä¢ Profundidade m√°xima: {max(niveis_hierarquicos.values()) if niveis_hierarquicos else 0}")
print(f"  ‚Ä¢ N√≠veis √∫nicos: {len(set(niveis_hierarquicos.values()))}")

# COMMAND ----------

# MAGIC %md
# MAGIC ## Prepara√ß√£o dos Dados para Visualiza√ß√£o

# COMMAND ----------

print("üìä Preparando dados para visualiza√ß√£o...")

# Criar DataFrame com m√©tricas de cada CD
cds_metrics = []

for cd in G.nodes():
    # Grau total (in + out)
    grau_total = G.degree(cd)
    grau_entrada = G.in_degree(cd)
    grau_saida = G.out_degree(cd)
    
    # N√≠vel hier√°rquico
    nivel = niveis_hierarquicos.get(cd, 0)
    
    # Tamanho da SCC
    scc_size = cd_scc_size.get(cd, 1)
    
    # Se faz parte de ciclo
    em_ciclo = scc_size > 1
    
    cds_metrics.append({
        'cd': cd,
        'grau_total': grau_total,
        'grau_entrada': grau_entrada,
        'grau_saida': grau_saida,
        'nivel_hierarquico': nivel,
        'scc_size': scc_size,
        'em_ciclo': em_ciclo
    })

# Converter para DataFrame
cds_df = pd.DataFrame(cds_metrics)

print(f"üìä M√©tricas calculadas para {len(cds_df)} CDs")
print(f"üîç Primeiras 5 m√©tricas:")
print(cds_df.head())

# COMMAND ----------

# MAGIC %md
# MAGIC ## Amostragem para Visualiza√ß√£o (se necess√°rio)

# COMMAND ----------

print("üéØ Preparando amostra para visualiza√ß√£o...")

# Se h√° muitos CDs, amostrar os de maior grau
MAX_NOS_VISUALIZACAO = 50

if len(cds_df) > MAX_NOS_VISUALIZACAO:
    print(f"‚ö†Ô∏è Muitos CDs ({len(cds_df)}). Amostrando os {MAX_NOS_VISUALIZACAO} de maior grau...")
    
    # Ordenar por grau total e pegar os top
    cds_amostra = cds_df.nlargest(MAX_NOS_VISUALIZACAO, 'grau_total')
    
    # Criar subgrafo apenas com os CDs amostrados
    cds_amostra_list = cds_amostra['cd'].tolist()
    G_amostra = G.subgraph(cds_amostra_list)
    
    # Filtrar arestas apenas entre CDs amostrados
    arestas_amostra = arestas_pandas[
        (arestas_pandas['origem'].isin(cds_amostra_list)) & 
        (arestas_pandas['destino'].isin(cds_amostra_list))
    ]
    
    print(f"üìä Amostra selecionada: {len(cds_amostra)} CDs")
    print(f"üîó Arestas na amostra: {len(arestas_amostra)}")
    
else:
    print(f"‚úÖ Quantidade de CDs ({len(cds_df)}) adequada para visualiza√ß√£o completa")
    cds_amostra = cds_df
    G_amostra = G
    arestas_amostra = arestas_pandas

# COMMAND ----------

# MAGIC %md
# MAGIC ## Cria√ß√£o do Gr√°fico Interativo Plotly

# COMMAND ----------

print("üìä Criando gr√°fico interativo...")

# Preparar posi√ß√µes dos n√≥s
# Usar layout hier√°rquico com n√≠vel no eixo Y
pos = {}
for _, row in cds_amostra.iterrows():
    cd = row['cd']
    nivel = row['nivel_hierarquico']
    
    # Posi√ß√£o X aleat√≥ria dentro do n√≠vel
    x_pos = np.random.uniform(-1, 1)
    pos[cd] = (x_pos, -nivel)  # Negativo para n√≠vel 0 no topo

# Criar figura
fig = go.Figure()

# Adicionar arestas (linhas direcionais)
for _, edge in arestas_amostra.iterrows():
    origem = edge['origem']
    destino = edge['destino']
    
    if origem in pos and destino in pos:
        x0, y0 = pos[origem]
        x1, y1 = pos[destino]
        
        # Adicionar seta direcional
        fig.add_trace(go.Scatter(
            x=[x0, x1, None],
            y=[y0, y1, None],
            mode='lines',
            line=dict(color='lightgray', width=1),
            hoverinfo='none',
            showlegend=False
        ))

# Adicionar n√≥s (CDs)
for _, row in cds_amostra.iterrows():
    cd = row['cd']
    x, y = pos[cd]
    
    # Cor baseada no tamanho da SCC (ciclos)
    scc_size = row['scc_size']
    if scc_size > 1:
        cor = 'red'  # Vermelho para ciclos
    else:
        cor = 'blue'  # Azul para n√≥s isolados
    
    # Tamanho baseado no grau total
    tamanho = max(10, min(30, row['grau_total'] * 2))
    
    # Tooltip com m√©tricas
    hovertext = (
        f"CD: {cd}<br>"
        f"N√≠vel: {row['nivel_hierarquico']}<br>"
        f"Grau Total: {row['grau_total']}<br>"
        f"Grau Entrada: {row['grau_entrada']}<br>"
        f"Grau Sa√≠da: {row['grau_saida']}<br>"
        f"SCC Size: {scc_size}<br>"
        f"Em Ciclo: {'Sim' if row['em_ciclo'] else 'N√£o'}"
    )
    
    fig.add_trace(go.Scatter(
        x=[x],
        y=[y],
        mode='markers',
        marker=dict(
            size=tamanho,
            color=cor,
            line=dict(width=2, color='black')
        ),
        text=hovertext,
        hoverinfo='text',
        name=f"CD {cd}",
        showlegend=False
    ))

# Configurar layout
fig.update_layout(
    title=dict(
        text="Complexidade da Malha Log√≠stica de CDs<br><sub>Eixo Y = N√≠vel Hier√°rquico | Cor = SCC (Vermelho=Ciclo) | Tamanho = Grau Total</sub>",
        x=0.5,
        font=dict(size=16)
    ),
    xaxis=dict(
        title="Posi√ß√£o Horizontal",
        showgrid=True,
        zeroline=False
    ),
    yaxis=dict(
        title="N√≠vel Hier√°rquico (0 = Fonte)",
        showgrid=True,
        zeroline=False
    ),
    width=1200,
    height=800,
    showlegend=False,
    hovermode='closest'
)

# Adicionar anota√ß√µes para legenda
fig.add_annotation(
    x=0.02, y=0.98,
    xref='paper', yref='paper',
    text="üî¥ Vermelho = Ciclos<br>üîµ Azul = N√≥s Isolados<br>üìè Tamanho = Grau Total",
    showarrow=False,
    bgcolor='rgba(255,255,255,0.8)',
    bordercolor='black',
    borderwidth=1
)

print("‚úÖ Gr√°fico criado com sucesso!")

# COMMAND ----------

# MAGIC %md
# MAGIC ## Salvamento do Gr√°fico HTML

# COMMAND ----------

print("üíæ Salvando gr√°fico como HTML...")

# Salvar como HTML
html_path = "/dbfs/tmp/malha_cds.html"
fig.write_html(html_path)

print(f"‚úÖ Gr√°fico salvo em: {html_path}")

# COMMAND ----------

# MAGIC %md
# MAGIC ## Resumo das M√©tricas

# COMMAND ----------

print("üìä RESUMO DA AN√ÅLISE DA MALHA DE CDs")
print("=" * 60)

# Estat√≠sticas gerais
print(f"üìà ESTAT√çSTICAS GERAIS:")
print(f"  ‚Ä¢ Total de CDs: {num_nos:,}")
print(f"  ‚Ä¢ Total de fluxos: {num_arestas:,}")
print(f"  ‚Ä¢ Densidade do grafo: {nx.density(G):.4f}")

# An√°lise de ciclos
print(f"\nüîÑ AN√ÅLISE DE CICLOS:")
print(f"  ‚Ä¢ Componentes fortemente conectadas: {len(sccs)}")
print(f"  ‚Ä¢ Ciclos detectados: {len(ciclos)}")
print(f"  ‚Ä¢ CDs em ciclos: {sum(len(scc) for scc in ciclos)}")

# An√°lise hier√°rquica
print(f"\nüìä AN√ÅLISE HIER√ÅRQUICA:")
print(f"  ‚Ä¢ N√≥s fonte: {len(nos_fonte)}")
print(f"  ‚Ä¢ Profundidade m√°xima: {max(niveis_hierarquicos.values()) if niveis_hierarquicos else 0}")
print(f"  ‚Ä¢ N√≠veis √∫nicos: {len(set(niveis_hierarquicos.values()))}")

# Top CDs por grau
print(f"\nüèÜ TOP 10 CDs POR GRAU TOTAL:")
top_cds = cds_df.nlargest(10, 'grau_total')
for _, row in top_cds.iterrows():
    ciclo_info = " (CICLO)" if row['em_ciclo'] else ""
    print(f"  ‚Ä¢ {row['cd']}: Grau {row['grau_total']} (N√≠vel {row['nivel_hierarquico']}){ciclo_info}")

# Ciclos maiores
if ciclos:
    print(f"\nüîÑ MAIORES CICLOS:")
    ciclos_ordenados = sorted(ciclos, key=len, reverse=True)
    for i, ciclo in enumerate(ciclos_ordenados[:5]):
        print(f"  ‚Ä¢ Ciclo {i+1}: {len(ciclo)} CDs - {list(ciclo)}")

print("=" * 60)

# COMMAND ----------

# MAGIC %md
# MAGIC ## Exporta√ß√£o do Resumo JSON

# COMMAND ----------

print("üìÑ Exportando resumo como JSON...")

# Criar resumo estruturado
resumo = {
    "estatisticas_gerais": {
        "total_cds": int(num_nos),
        "total_fluxos": int(num_arestas),
        "densidade": float(nx.density(G))
    },
    "analise_ciclos": {
        "total_sccs": len(sccs),
        "ciclos_detectados": len(ciclos),
        "cds_em_ciclos": sum(len(scc) for scc in ciclos),
        "ciclos": [list(ciclo) for ciclo in ciclos]
    },
    "analise_hierarquica": {
        "nos_fonte": list(nos_fonte),
        "profundidade_maxima": max(niveis_hierarquicos.values()) if niveis_hierarquicos else 0,
        "niveis_unicos": len(set(niveis_hierarquicos.values()))
    },
    "top_cds": cds_df.nlargest(10, 'grau_total').to_dict('records'),
    "configuracao": {
        "ambiente": AMBIENTE_TABELA,
        "modo": MODO_EXECUCAO,
        "usar_samples": USAR_SAMPLES,
        "tabela_origem": TABELA_MALHA_CDS
    }
}

# Salvar JSON
json_path = "/dbfs/tmp/malha_cds_resumo.json"
with open(json_path, 'w') as f:
    json.dump(resumo, f, indent=2, ensure_ascii=False)

print(f"‚úÖ Resumo JSON salvo em: {json_path}")

# COMMAND ----------

# MAGIC %md
# MAGIC ## Exibi√ß√£o do Gr√°fico

# COMMAND ----------

# Exibir o gr√°fico
fig.show()

# COMMAND ----------

print("üéâ An√°lise da complexidade da malha de CDs conclu√≠da com sucesso!")
print("=" * 80)
print("üìÅ ARQUIVOS GERADOS:")
print(f"  ‚Ä¢ Gr√°fico HTML: {html_path}")
print(f"  ‚Ä¢ Resumo JSON: {json_path}")
print("=" * 80)
print("üîç INTERPRETA√á√ÉO DOS RESULTADOS:")
print("  ‚Ä¢ Eixo Y: N√≠vel hier√°rquico (0 = fonte, n√∫meros maiores = mais distante)")
print("  ‚Ä¢ Cor Vermelha: CDs que fazem parte de ciclos")
print("  ‚Ä¢ Cor Azul: CDs isolados (sem ciclos)")
print("  ‚Ä¢ Tamanho do n√≥: Proporcional ao grau total (conex√µes)")
print("  ‚Ä¢ Linhas: Fluxos direcionais entre CDs")
print("=" * 80)
